// MIT Licensed (see LICENSE.md).

// Shader input attribute definitions
// [AppBuiltInInput] Input comes from predefined data given by the graphics engine
// [StageInput]      Input comes from the previous hardware stage (mesh -> vertex -> geometry -> pixel)
// [FragmentInput]   Input comes from a previous fragment in the same stage
// [PropertyInput]   Input comes from this fragment
// [Input]           Input auto resolves from any of the previous in the order
//                   [FragmentInput][StageInput][AppBuiltInInput][PropertyInput]
//
// Pixel fragment Example:
// [FragmentInput][StageInput] var ViewNormal : Real3;
// Input will come from a previous pixel fragment that outputs ViewNormal
// otherwise, input will come from the vertex shader

[Pixel]
struct WorldUV
{

  [AppBuiltInInput] var ObjectWorldPosition : Real3;
  [AppBuiltInInput] var ViewToWorld : Real4x4;

  [FragmentInput][StageInput] var ViewPosition : Real3;
  [FragmentInput][StageInput][Output] var Uv : Real2;
  
  
  [Input][Output] var UvScale : Real2 = Real2(1,1);

  function Main()
  {
     var worldPosition = Math.Multiply(this.ViewToWorld, Real4(this.ViewPosition.XYZ, 1.0)).XYZ + this.ObjectWorldPosition;
    this.Uv = Real2(worldPosition.X, worldPosition.Z) * this.UvScale;
  }
}
