[Pixel][PostProcess]
struct COCPass
{
  
  [StageInput] var Uv : Real2;
  [AppBuiltInInput] var FarPlane : Real;
  
  [Input] var ScreenBuffer : SampledImage2d;
  [Input] var Depth : SampledImage2d;
  
  [Input] var FocusDistance : Real;
  [Input] var Aperture : Real;
  
  [Output] var Target0 : Real4;
  
  function GetCOC(sampleUV : Real2) : Real
  {
    var depth = Math.Abs(this.Depth.Sample(sampleUV).Z * this.FarPlane);
    var coc =  (depth - this.FocusDistance) / this.Aperture;
    return Math.Clamp(coc, -1.0, 1.0);
  }
  
  function Main()
  {
    var color = this.ScreenBuffer.Sample(this.Uv).XYZ;
    
    var screenSize = this.ScreenBuffer.SampleSize(0) / Real2(100);
    
    var coc = this.GetCOC(this.Uv);
    
    this.Target0 = Real4(color, coc);
  }
}

[Pixel][PostProcess]
struct BokehPass
{
  [StageInput] var Uv : Real2;
  [AppBuiltInInput] var FarPlane : Real;
  
  [Input] var DOFBuffer : SampledImage2d;
  [Input] var COCBuffer : SampledImage2d;
  
  [PropertyInput] var DOFSampleCount = 16;
  [PropertyInput] var BokehSize : Real = 8.0;
  [Input] var Depth : SampledImage2d;
  [Input] var FocalDistance : Real;
  var DOFBokehRadius = 8.0;
  
  var Samples : FixedArray[Real2, 22] = FixedArray[Real2, 22]()
  {
    Real2(0, 0),
    Real2(0.53333336, 0),
    Real2(0.3325279, 0.4169768),
    Real2(-0.11867785, 0.5199616),
    Real2(-0.48051673, 0.2314047),
    Real2(-0.48051673, -0.23140468),
    Real2(-0.11867763, -0.51996166),
    Real2(0.33252785, -0.4169769),
    Real2(1, 0),
    Real2(0.90096885, 0.43388376),
    Real2(0.6234898, 0.7818315),
    Real2(0.22252098, 0.9749279),
    Real2(-0.22252095, 0.9749279),
    Real2(-0.62349, 0.7818314),
    Real2(-0.90096885, 0.43388382),
    Real2(-1, 0),
    Real2(-0.90096885, -0.43388376),
    Real2(-0.6234896, -0.7818316),
    Real2(-0.22252055, -0.974928),
    Real2(0.2225215, -0.9749278),
    Real2(0.6234897, -0.7818316),
    Real2(0.90096885, -0.43388376)
  };
  
  [Output] var Target0 : Real4;
  
  function Main()
  {
    var color = Real4.Zero;
    color.W = this.DOFBuffer.Sample(this.Uv).W;    
    
    var textureSize = this.DOFBuffer.SampleSize(0);
    
    for(var i = 0; i < this.DOFSampleCount; ++i)
    {
      var sampleUV = this.Samples[i];
      sampleUV *= (Real2(1.0) / textureSize) * this.BokehSize;
      
      var depthSample = GeometryPass.GetDepth(this.Depth.Sample(this.Uv +sampleUV)) * this.FarPlane;
     
      var sampleCOC = this.COCBuffer.Sample(this.Uv+ sampleUV).W;
      var dofStrength = Math.SmoothStep(0.1, 1, Math.Abs(sampleCOC));
      if(dofStrength < 0.2)
      {
        color.XYZ += this.DOFBuffer.Sample(this.Uv).XYZ;
      }
      else
        color.XYZ += this.DOFBuffer.Sample(this.Uv + sampleUV).XYZ;
    }
    
    color.XYZ *= 1.0 / this.DOFSampleCount;
    
    this.Target0 = color;
  }
}

[Pixel][PostProcess]
struct DOFCombinePass
{
  [StageInput] var Uv : Real2;
  [AppBuiltInInput] var FarPlane : Real;
  
  
  [Input] var ScreenBuffer : SampledImage2d;
  [Input] var DOFBuffer : SampledImage2d;
  [Input] var BokehBuffer : SampledImage2d;
  [Input] var Depth : SampledImage2d;
  [Input] var FocalDistance : Real;
  
  [Output] var Target0 : Real4;
  
  function Main()
  {
    var screenSample = this.ScreenBuffer.Sample(this.Uv);
    var dofSample = this.DOFBuffer.Sample(this.Uv);
    var bokehSample = this.BokehBuffer.Sample(this.Uv);
    
    var dof = dofSample.XYZ;
    var coc = dofSample.W;
    
    var dofStrength = Math.SmoothStep(0.1, 1, Math.Abs(coc));
    
    var depthSample = GeometryPass.GetDepth(this.Depth.Sample(this.Uv)) * this.FarPlane;
    
    this.Target0 =  Math.Lerp(screenSample, bokehSample, dofStrength);
  }
}

[Pixel][PostProcess]
struct TentPass
{
  [StageInput] var Uv : Real2;
  [Input] var BokehBuffer : SampledImage2d;
  
  [Output] var Target0 : Real4;
  function Main()
  {
    var texSize = Real2(1.0) / this.BokehBuffer.SampleSize(0);
    var sample = texSize.XYXY * Real2(-0.5, 0.5).XXYY;
    var output =
    this.BokehBuffer.Sample(this.Uv + sample.XY) +
    this.BokehBuffer.Sample(this.Uv + sample.ZY) +
    this.BokehBuffer.Sample(this.Uv + sample.XW) +
    this.BokehBuffer.Sample(this.Uv + sample.ZW);
    
    this.Target0 = output * 0.25;
  }
} 

[Pixel][PostProcess]
struct DOFDebug
{
  [StageInput] var Uv : Real2;
  [Input] var DOFBuffer : SampledImage2d;
  
   [Output] var Target0 : Real4;
  
  function Main()
  {
    var dofSample = this.DOFBuffer.Sample(this.Uv);
    this.Target0 = Real4(dofSample.WWW, 1);
  }
}