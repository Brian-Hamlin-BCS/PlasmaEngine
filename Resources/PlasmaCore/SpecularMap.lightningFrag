// MIT Licensed (see LICENSE.md).

// Specular input for lighting opaque geometry.
// Output values are mapped from a texture over the surface.
[Pixel]
struct SpecularMap
{
  [FragmentInput][StageInput] var Uv : Real2;
  [Input] var SpecularMap : SampledImage2d;
  [Input] var InvertSpecMax : Boolean;
  [Input] var SpecMaxTweak : Real;
  [Input] var Pow2Metal : Boolean;
  
  [FragmentInput][Output] var Albedo : Real3;
  [FragmentInput][StageInput][Output] var Metallic : Real;
  
  function Main()
  {
    var specular = this.SpecularMap.Sample(this.Uv);
    var specularMax = Math.Max(specular.X, Math.Max(specular.Y, specular.Z));
    if(this.InvertSpecMax)
      specularMax = (1.0 - specularMax) ;
    
    this.Albedo = Math.Lerp(this.Albedo, specular.XYZ,  specularMax + this.SpecMaxTweak);
    if(this.Pow2Metal)
      this.Metallic += Math.Pow(specularMax, 2); 
    else
      this.Metallic += specularMax; 
  }
}
