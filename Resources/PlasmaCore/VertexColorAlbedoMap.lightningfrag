// MIT Licensed (see LICENSE.md).

[Pixel]
struct VertexColorAlbedoMap
{
  [FragmentInput][StageInput] var Uv : Real2;
  [StageInput] var VertexColor : Real4;
  [Input][Slider(0, 1, 0.01)] var BlendStrength : Real;
  [Input] var AlbedoRed : SampledImage2d;
  [Input] var RedHeight : SampledImage2d;
  [Input] var RedInvertHeight : Boolean;
  [Input] var RedHeightOffset : Real;
  [Input] var RedStrength : Real = 1.0;
  [Input] var RedPower : Real = 1.0;
  [Input] var AlbedoGreen : SampledImage2d;
  [Input] var GreenHeight : SampledImage2d;
  [Input] var GreenInvertHeight : Boolean;
  [Input] var GreenHeightOffset : Real;
  [Input] var GreenStrength : Real = 1.0;
  [Input] var GreenPower : Real = 1.0;
  [Input] var AlbedoBlue : SampledImage2d;
  [Input] var BlueHeight : SampledImage2d;
  [Input] var BlueInvertHeight : Boolean;
  [Input] var BlueHeightOffset : Real;
  [Input] var BlueStrength : Real = 1.0;
  [Input]var BluePower : Real = 1.0;
  
  [FragmentInput][Output] var Albedo : Real3;
  
  function HeightBlend(input1 : Real3, height1 : Real, input2  :Real3, height2 : Real, input3 : Real3, height3 : Real) : Real3
  {
    var height_start = Math.Max(Math.Max(height1, height2), height3) - Math.Max(this.BlendStrength, 0.01);
    var b1 = Math.Max(height1 - height_start, 0);
    var b2 = Math.Max(height2 - height_start, 0);
    var b3 = Math.Max(height3 - height_start, 0);
    return ((input1 * b1) + (input2 * b2) + (input3 * b3)) / (b1 + b2 + b3);
  }

  function Main()
  {
    var redSample = this.AlbedoRed.Sample(this.Uv).XYZ;
    var greenSample = this.AlbedoGreen.Sample(this.Uv).XYZ;
    var blueSample = this.AlbedoBlue.Sample(this.Uv).XYZ;
    
    var redHeight = (this.RedHeight.Sample(this.Uv).X + this.RedHeightOffset);
    var greenHeight = (this.GreenHeight.Sample(this.Uv).X + this.GreenHeightOffset);
    var blueHeight = (this.BlueHeight.Sample(this.Uv).X + this.BlueHeightOffset);
    
    if(this.RedInvertHeight)
      redHeight = 1.0 - redHeight;
      
    if(this.GreenInvertHeight)
      greenHeight = 1.0 - greenHeight;
      
    if(this.BlueInvertHeight)
      blueHeight = 1.0 - blueHeight;
    
    redHeight *= Math.Pow(this.VertexColor.X, 1.0 - this.RedPower) * this.RedStrength;
    greenHeight *= Math.Pow(this.VertexColor.Y, 1.0 - this.GreenPower) * this.GreenStrength; 
    blueHeight *= Math.Pow(this.VertexColor.Z, 1.0 - this.BluePower) * this.BlueStrength;
    
    this.Albedo = this.HeightBlend(redSample, redHeight, greenSample, greenHeight, blueSample, blueHeight);  
  }
}
