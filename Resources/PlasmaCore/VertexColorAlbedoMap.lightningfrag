// MIT Licensed (see LICENSE.md).

[Pixel]
struct VertexColorAlbedoMap
{
  [FragmentInput][StageInput] var Uv : Real2;
  [StageInput] var VertexColor : Real4;
  [Input] var AlbedoRed : SampledImage2d;
  [Input] var RedHeight : SampledImage2d;
  [Input] var RedStrength : Real = 1.0;
  [Input][Slider(0,1,0.1)] var RedPower : Real = 1.0;
  [Input] var AlbedoGreen : SampledImage2d;
  [Input] var GreenHeight : SampledImage2d;
  [Input] var GreenStrength : Real = 1.0;
  [Input][Slider(0,1,0.1)] var GreenPower : Real = 1.0;
  [Input] var AlbedoBlue : SampledImage2d;
  [Input] var BlueHeight : SampledImage2d;
  [Input] var BlueStrength : Real = 1.0;
  [Input][Slider(0,1,0.1)] var BluePower : Real = 1.0;
  
  [FragmentInput][Output] var Albedo : Real3;

  function Main()
  {
    var redSample = this.AlbedoRed.Sample(this.Uv).XYZ;
    var greenSample = this.AlbedoGreen.Sample(this.Uv).XYZ;
    var blueSample = this.AlbedoBlue.Sample(this.Uv).XYZ;
    
    var redHeight = this.RedHeight.Sample(this.Uv).X * Math.Pow(this.VertexColor.X, 1.0 - this.RedPower) * this.RedStrength;
    var greenHeight = this.GreenHeight.Sample(this.Uv).X * Math.Pow(this.VertexColor.Y, 1.0 - this.GreenPower) * this.GreenStrength;
    var blueHeight = this.BlueHeight.Sample(this.Uv).X * Math.Pow(this.VertexColor.Z, 1.0 - this.BluePower) * this.BlueStrength;
    
    var albedo = this.Albedo;
    albedo = Math.Lerp(albedo, redSample, redHeight);
    albedo = Math.Lerp(albedo, greenSample, greenHeight);
    albedo = Math.Lerp(albedo, blueSample, blueHeight);
    
    this.Albedo = albedo;  
  }
}
