// MIT Licensed (see LICENSE.md).

class PostProcessSSR : LightningComponent
{
    [Property] var Active : Boolean = true;
    
    [Group("Settings")]
    [Property]
    var RoughnessCutoff : Real = 0.85;
    
    [Group("Settings")]
    [Property]
    var Jitter : Boolean = true;

    [Group("Settings")]
    [Property]
    var Resolution : SSRResolution = SSRResolution.Half;   
    
    [Group("Debug")]
    [Property]
    var Debug : Boolean = false;
    
    function AddSSRRenderTasks(event : RenderTasksEvent, geometryBuffer0 : RenderTarget, geometryBuffer1 : RenderTarget, screenBuffer : RenderTarget, ssrBuffer : RenderTarget)
    {
        if(this.Active == false)
            return;
            
                   
        var postSSR  = SSR();
        postSSR.GeometryBuffer0 = geometryBuffer0.Texture;
        postSSR.GeometryBuffer1 = geometryBuffer1.Texture;
        postSSR.ScreenBuffer = screenBuffer.Texture;
        postSSR.RoughnessCutoff = this.RoughnessCutoff;
        postSSR.Debug = this.Debug;
        postSSR.EnvironmentBrdfLut = Texture.EnvironmentBrdfLut;
        postSSR.Jiiter = this.Jitter;
        
        event.AddRenderTaskPostProcess(ssrBuffer, postSSR);
        
        if(this.Resolution == SSRResolution.Half)
        {
          var bufferSize = ssrBuffer.Texture.Size;
          var ssrSamplerSettings = SamplerSettings() {Filtering = TextureFiltering.Bilinear};
              
          var ssrDownscale = event.GetRenderTarget((bufferSize * 0.5) as Integer2, TextureFormat.RGB16f, ssrSamplerSettings);
          
          DownsampleAndBlur[Filter13TapPartialKarisAverage, SeparableBlurRadius5].Call(event, ssrBuffer, ssrDownscale);
          this.Upsample(event, ssrDownscale, ssrBuffer);
          ssrDownscale.Release();
        }
        
        if(this.Resolution == SSRResolution.Quater)
        {
          var bufferSize = ssrBuffer.Texture.Size;
          var ssrSamplerSettings = SamplerSettings() {Filtering = TextureFiltering.Bilinear};
              
          var ssrDownscale = event.GetRenderTarget((bufferSize * 0.25) as Integer2, TextureFormat.RGB16f, ssrSamplerSettings);
          
          DownsampleAndBlur[Filter13Tap, SeparableBlurRadius10].Call(event, ssrBuffer, ssrDownscale);
          this.Upsample(event, ssrDownscale, ssrBuffer);
          ssrDownscale.Release();
        }
      
        if(!this.Debug)
        {
          var ssrApply = SSRApply();
          ssrApply.SSRBuffer = ssrBuffer.Texture;
          ssrApply.ScreenBuffer = screenBuffer.Texture;
          event.AddRenderTaskPostProcess(screenBuffer, ssrApply);
          
          event.AddRenderTaskClearTarget(ssrBuffer, Real4.Zero);
        }
      
        
        if(this.Debug)
        {
          var copyPass = CopyTarget();
          copyPass.Texture = ssrBuffer.Texture;
          event.AddRenderTaskPostProcess(screenBuffer, copyPass);
          
          event.AddRenderTaskClearTarget(ssrBuffer, Real4.Zero);
        }
    }
    
    function Upsample(event : RenderTasksEvent, target0 : RenderTarget, target1 : RenderTarget)
    {
      var upsampleSettings = RenderSettings();
      upsampleSettings.ColorTarget = target1;
      
      upsampleSettings.BlendSettings.BlendMode = BlendMode.Separate;
      upsampleSettings.BlendSettings.BlendEquation = BlendEquation.Add;
      upsampleSettings.BlendSettings.SourceFactor = BlendFactor.One;
      upsampleSettings.BlendSettings.DestFactor = BlendFactor.One;
      upsampleSettings.BlendSettings.SourceFactorAlpha = BlendFactor.Plasma;
      upsampleSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
      
      var copyTarget = CopyTarget();    
      copyTarget.Texture = target0.Texture;
      event.AddRenderTaskPostProcess(upsampleSettings, copyTarget);
    }
  }
  
  enum SSRResolution
  {
    Full,
    Half,
    Quater
  }